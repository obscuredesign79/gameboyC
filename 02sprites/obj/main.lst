                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Mar 19 2016) (Linux)
                              4 ; This file was generated Fri Nov 15 10:40:49 2019
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mgbz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _performantDelay
                             14 	.globl _scroll_sprite
                             15 	.globl _move_sprite
                             16 	.globl _set_sprite_tile
                             17 	.globl _set_sprite_data
                             18 	.globl _wait_vbl_done
                             19 	.globl _pacMan
                             20 ;--------------------------------------------------------
                             21 ; ram data
                             22 ;--------------------------------------------------------
                             23 	.area _DATA
   0000                      24 _pacMan::
   0000                      25 	.ds 32
                             26 ;--------------------------------------------------------
                             27 ; absolute external ram data
                             28 ;--------------------------------------------------------
                             29 	.area _DABS (ABS)
                             30 ;--------------------------------------------------------
                             31 ; global & static initialisations
                             32 ;--------------------------------------------------------
                             33 	.area _HOME
                             34 	.area _GSINIT
                             35 	.area _GSFINAL
                             36 	.area _GSINIT
                             37 ;spritePac.c:26: unsigned char pacMan[] =
   0000 21r00r00             38 	ld	hl,#_pacMan
   0003 36 3C                39 	ld	(hl),#0x3C
   0005 21r01r00             40 	ld	hl,#(_pacMan + 0x0001)
   0008 36 3C                41 	ld	(hl),#0x3C
   000A 21r02r00             42 	ld	hl,#(_pacMan + 0x0002)
   000D 36 7E                43 	ld	(hl),#0x7E
   000F 21r03r00             44 	ld	hl,#(_pacMan + 0x0003)
   0012 36 42                45 	ld	(hl),#0x42
   0014 21r04r00             46 	ld	hl,#(_pacMan + 0x0004)
   0017 36 FF                47 	ld	(hl),#0xFF
   0019 21r05r00             48 	ld	hl,#(_pacMan + 0x0005)
   001C 36 91                49 	ld	(hl),#0x91
   001E 21r06r00             50 	ld	hl,#(_pacMan + 0x0006)
   0021 36 FF                51 	ld	(hl),#0xFF
   0023 21r07r00             52 	ld	hl,#(_pacMan + 0x0007)
   0026 36 81                53 	ld	(hl),#0x81
   0028 21r08r00             54 	ld	hl,#(_pacMan + 0x0008)
   002B 36 FF                55 	ld	(hl),#0xFF
   002D 21r09r00             56 	ld	hl,#(_pacMan + 0x0009)
   0030 36 8F                57 	ld	(hl),#0x8F
   0032 21r0Ar00             58 	ld	hl,#(_pacMan + 0x000a)
   0035 36 FF                59 	ld	(hl),#0xFF
   0037 21r0Br00             60 	ld	hl,#(_pacMan + 0x000b)
   003A 36 81                61 	ld	(hl),#0x81
   003C 21r0Cr00             62 	ld	hl,#(_pacMan + 0x000c)
   003F 36 7E                63 	ld	(hl),#0x7E
   0041 21r0Dr00             64 	ld	hl,#(_pacMan + 0x000d)
   0044 36 42                65 	ld	(hl),#0x42
   0046 21r0Er00             66 	ld	hl,#(_pacMan + 0x000e)
   0049 36 3C                67 	ld	(hl),#0x3C
   004B 21r0Fr00             68 	ld	hl,#(_pacMan + 0x000f)
   004E 36 3C                69 	ld	(hl),#0x3C
   0050 21r10r00             70 	ld	hl,#(_pacMan + 0x0010)
   0053 36 3C                71 	ld	(hl),#0x3C
   0055 21r11r00             72 	ld	hl,#(_pacMan + 0x0011)
   0058 36 3C                73 	ld	(hl),#0x3C
   005A 21r12r00             74 	ld	hl,#(_pacMan + 0x0012)
   005D 36 7E                75 	ld	(hl),#0x7E
   005F 21r13r00             76 	ld	hl,#(_pacMan + 0x0013)
   0062 36 42                77 	ld	(hl),#0x42
   0064 21r14r00             78 	ld	hl,#(_pacMan + 0x0014)
   0067 36 FF                79 	ld	(hl),#0xFF
   0069 21r15r00             80 	ld	hl,#(_pacMan + 0x0015)
   006C 36 91                81 	ld	(hl),#0x91
   006E 21r16r00             82 	ld	hl,#(_pacMan + 0x0016)
   0071 36 FE                83 	ld	(hl),#0xFE
   0073 21r17r00             84 	ld	hl,#(_pacMan + 0x0017)
   0076 36 86                85 	ld	(hl),#0x86
   0078 21r18r00             86 	ld	hl,#(_pacMan + 0x0018)
   007B 36 F0                87 	ld	(hl),#0xF0
   007D 21r19r00             88 	ld	hl,#(_pacMan + 0x0019)
   0080 36 90                89 	ld	(hl),#0x90
   0082 21r1Ar00             90 	ld	hl,#(_pacMan + 0x001a)
   0085 36 F8                91 	ld	(hl),#0xF8
   0087 21r1Br00             92 	ld	hl,#(_pacMan + 0x001b)
   008A 36 88                93 	ld	(hl),#0x88
   008C 21r1Cr00             94 	ld	hl,#(_pacMan + 0x001c)
   008F 36 7C                95 	ld	(hl),#0x7C
   0091 21r1Dr00             96 	ld	hl,#(_pacMan + 0x001d)
   0094 36 44                97 	ld	(hl),#0x44
   0096 21r1Er00             98 	ld	hl,#(_pacMan + 0x001e)
   0099 36 38                99 	ld	(hl),#0x38
   009B 21r1Fr00            100 	ld	hl,#(_pacMan + 0x001f)
   009E 36 38               101 	ld	(hl),#0x38
                            102 ;--------------------------------------------------------
                            103 ; Home
                            104 ;--------------------------------------------------------
                            105 	.area _HOME
                            106 	.area _HOME
                            107 ;--------------------------------------------------------
                            108 ; code
                            109 ;--------------------------------------------------------
                            110 	.area _CODE
                            111 ;main.c:5: void performantDelay(UINT8 numloops){
                            112 ;	---------------------------------
                            113 ; Function performantDelay
                            114 ; ---------------------------------
   0000                     115 _performantDelay::
                            116 ;main.c:8: for(i=0;i<numloops;i++){
   0000 06 00               117 	ld	b,#0x00
   0002                     118 00103$:
   0002 78                  119 	ld	a,b
   0003 F8 02               120 	ldhl	sp,#2
   0005 96                  121 	sub	a, (hl)
   0006 D0                  122 	ret	NC
                            123 ;main.c:9: wait_vbl_done();
   0007 C5                  124 	push	bc
   0008 CDr00r00            125 	call	_wait_vbl_done
   000B C1                  126 	pop	bc
                            127 ;main.c:8: for(i=0;i<numloops;i++){
   000C 04                  128 	inc	b
   000D 18 F3               129 	jr	00103$
   000F C9                  130 	ret
                            131 ;main.c:12: void main(){
                            132 ;	---------------------------------
                            133 ; Function main
                            134 ; ---------------------------------
   0010                     135 _main::
                            136 ;main.c:13: UINT8 currentSpriteIndex = 0;
   0010 06 00               137 	ld	b,#0x00
                            138 ;main.c:15: set_sprite_data(0, 2, pacMan);//set_sprite_data(starts of tile, how manytiles, name of variable sprite)
   0012 11r00r00            139 	ld	de,#_pacMan
   0015 C5                  140 	push	bc
   0016 D5                  141 	push	de
   0017 21 00 02            142 	ld	hl,#0x0200
   001A E5                  143 	push	hl
   001B CDr00r00            144 	call	_set_sprite_data
   001E E8 04               145 	add	sp, #4
   0020 C1                  146 	pop	bc
                            147 ;main.c:16: set_sprite_tile(0, 0);//set_sprite_tile(tile number to load, sprite index if more than one tile can change)
   0021 C5                  148 	push	bc
   0022 21 00 00            149 	ld	hl,#0x0000
   0025 E5                  150 	push	hl
   0026 CDr00r00            151 	call	_set_sprite_tile
   0029 E8 02               152 	add	sp, #2
   002B C1                  153 	pop	bc
                            154 ;main.c:17: move_sprite(0, 88, 78);//move_sprite(sprite ID, x, y)
   002C C5                  155 	push	bc
   002D 21 58 4E            156 	ld	hl,#0x4E58
   0030 E5                  157 	push	hl
   0031 AF                  158 	xor	a, a
   0032 F5                  159 	push	af
   0033 33                  160 	inc	sp
   0034 CDr00r00            161 	call	_move_sprite
   0037 E8 03               162 	add	sp, #3
   0039 C1                  163 	pop	bc
                            164 ;main.c:18: SHOW_SPRITES;
   003A 11 40 FF            165 	ld	de,#0xFF40
   003D 1A                  166 	ld	a,(de)
   003E 5F                  167 	ld	e,a
   003F 16 00               168 	ld	d,#0x00
   0041 7B                  169 	ld	a,e
   0042 CB CF               170 	set	1, a
   0044 4F                  171 	ld	c,a
   0045 21 40 FF            172 	ld	hl,#0xFF40
   0048 71                  173 	ld	(hl),c
                            174 ;main.c:20: while(1){
   0049                     175 00105$:
                            176 ;main.c:21: if(currentSpriteIndex == 0){
   0049 78                  177 	ld	a,b
   004A B7                  178 	or	a, a
   004B 20 04               179 	jr	NZ,00102$
                            180 ;main.c:22: currentSpriteIndex = 1;
   004D 06 01               181 	ld	b,#0x01
   004F 18 02               182 	jr	00103$
   0051                     183 00102$:
                            184 ;main.c:25: currentSpriteIndex = 0;
   0051 06 00               185 	ld	b,#0x00
   0053                     186 00103$:
                            187 ;main.c:27: set_sprite_tile(0, currentSpriteIndex);
   0053 C5                  188 	push	bc
   0054 C5                  189 	push	bc
   0055 33                  190 	inc	sp
   0056 AF                  191 	xor	a, a
   0057 F5                  192 	push	af
   0058 33                  193 	inc	sp
   0059 CDr00r00            194 	call	_set_sprite_tile
   005C E8 02               195 	add	sp, #2
   005E C1                  196 	pop	bc
                            197 ;main.c:29: performantDelay(4);
   005F C5                  198 	push	bc
   0060 3E 04               199 	ld	a,#0x04
   0062 F5                  200 	push	af
   0063 33                  201 	inc	sp
   0064 CDr00r00            202 	call	_performantDelay
   0067 33                  203 	inc	sp
   0068 C1                  204 	pop	bc
                            205 ;main.c:30: scroll_sprite(0, 1, 0);
   0069 C5                  206 	push	bc
   006A 21 01 00            207 	ld	hl,#0x0001
   006D E5                  208 	push	hl
   006E AF                  209 	xor	a, a
   006F F5                  210 	push	af
   0070 33                  211 	inc	sp
   0071 CDr00r00            212 	call	_scroll_sprite
   0074 E8 03               213 	add	sp, #3
   0076 C1                  214 	pop	bc
                            215 ;main.c:32: wait_vbl_done();
   0077 C5                  216 	push	bc
   0078 CDr00r00            217 	call	_wait_vbl_done
   007B C1                  218 	pop	bc
   007C C3r49r00            219 	jp	00105$
   007F C9                  220 	ret
                            221 	.area _CODE
                            222 	.area _CABS (ABS)
