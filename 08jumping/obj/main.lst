                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Mar 19 2016) (Linux)
                              4 ; This file was generated Tue Oct 29 20:25:29 2019
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mgbz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _jump
                             14 	.globl _wouldHitSurf
                             15 	.globl _performantDelay
                             16 	.globl _move_sprite
                             17 	.globl _set_sprite_tile
                             18 	.globl _set_sprite_data
                             19 	.globl _wait_vbl_done
                             20 	.globl _joypad
                             21 	.globl _bloke1
                             22 	.globl _bloke2
                             23 	.globl _floorYPosition
                             24 	.globl _currentSpeedY
                             25 	.globl _gravity
                             26 	.globl _jumping
                             27 	.globl _playerLocation
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DATA
   0000                      32 _playerLocation::
   0000                      33 	.ds 2
   0002                      34 _jumping::
   0002                      35 	.ds 1
   0003                      36 _gravity::
   0003                      37 	.ds 1
   0004                      38 _currentSpeedY::
   0004                      39 	.ds 1
   0005                      40 _floorYPosition::
   0005                      41 	.ds 1
   0006                      42 _bloke2::
   0006                      43 	.ds 16
   0016                      44 _bloke1::
   0016                      45 	.ds 128
                             46 ;--------------------------------------------------------
                             47 ; absolute external ram data
                             48 ;--------------------------------------------------------
                             49 	.area _DABS (ABS)
                             50 ;--------------------------------------------------------
                             51 ; global & static initialisations
                             52 ;--------------------------------------------------------
                             53 	.area _HOME
                             54 	.area _GSINIT
                             55 	.area _GSFINAL
                             56 	.area _GSINIT
                             57 ;main.c:7: INT8 gravity=-2;
   0000 21r03r00             58 	ld	hl,#_gravity
   0003 36 FE                59 	ld	(hl),#0xFE
                             60 ;main.c:9: UINT8 floorYPosition=100;
   0005 21r05r00             61 	ld	hl,#_floorYPosition
   0008 36 64                62 	ld	(hl),#0x64
                             63 ;main.c:12: unsigned char bloke2[] =
   000A 21r06r00             64 	ld	hl,#_bloke2
   000D 36 7E                65 	ld	(hl),#0x7E
   000F 21r07r00             66 	ld	hl,#(_bloke2 + 0x0001)
   0012 36 7E                67 	ld	(hl),#0x7E
   0014 21r08r00             68 	ld	hl,#(_bloke2 + 0x0002)
   0017 36 81                69 	ld	(hl),#0x81
   0019 21r09r00             70 	ld	hl,#(_bloke2 + 0x0003)
   001C 36 FF                71 	ld	(hl),#0xFF
   001E 01r0Ar00             72 	ld	bc,#_bloke2 + 4
   0021 AF                   73 	xor	a, a
   0022 02                   74 	ld	(bc),a
   0023 21r0Br00             75 	ld	hl,#(_bloke2 + 0x0005)
   0026 36 FF                76 	ld	(hl),#0xFF
   0028 21r0Cr00             77 	ld	hl,#(_bloke2 + 0x0006)
   002B 36 1C                78 	ld	(hl),#0x1C
   002D 21r0Dr00             79 	ld	hl,#(_bloke2 + 0x0007)
   0030 36 E7                80 	ld	(hl),#0xE7
   0032 21r0Er00             81 	ld	hl,#(_bloke2 + 0x0008)
   0035 36 1C                82 	ld	(hl),#0x1C
   0037 21r0Fr00             83 	ld	hl,#(_bloke2 + 0x0009)
   003A 36 E3                84 	ld	(hl),#0xE3
   003C 01r10r00             85 	ld	bc,#_bloke2 + 10
   003F AF                   86 	xor	a, a
   0040 02                   87 	ld	(bc),a
   0041 21r11r00             88 	ld	hl,#(_bloke2 + 0x000b)
   0044 36 FE                89 	ld	(hl),#0xFE
   0046 21r12r00             90 	ld	hl,#(_bloke2 + 0x000c)
   0049 36 1E                91 	ld	(hl),#0x1E
   004B 21r13r00             92 	ld	hl,#(_bloke2 + 0x000d)
   004E 36 7E                93 	ld	(hl),#0x7E
   0050 21r14r00             94 	ld	hl,#(_bloke2 + 0x000e)
   0053 36 3F                95 	ld	(hl),#0x3F
   0055 21r15r00             96 	ld	hl,#(_bloke2 + 0x000f)
   0058 36 3F                97 	ld	(hl),#0x3F
                             98 ;main.c:17: unsigned char bloke1[] =
   005A 21r16r00             99 	ld	hl,#_bloke1
   005D 36 00               100 	ld	(hl),#0x00
   005F 01r17r00            101 	ld	bc,#_bloke1 + 1
   0062 AF                  102 	xor	a, a
   0063 02                  103 	ld	(bc),a
   0064 21r18r00            104 	ld	hl,#(_bloke1 + 0x0002)
   0067 36 38               105 	ld	(hl),#0x38
   0069 21r19r00            106 	ld	hl,#(_bloke1 + 0x0003)
   006C 36 38               107 	ld	(hl),#0x38
   006E 21r1Ar00            108 	ld	hl,#(_bloke1 + 0x0004)
   0071 36 7C               109 	ld	(hl),#0x7C
   0073 21r1Br00            110 	ld	hl,#(_bloke1 + 0x0005)
   0076 36 44               111 	ld	(hl),#0x44
   0078 21r1Cr00            112 	ld	hl,#(_bloke1 + 0x0006)
   007B 36 7F               113 	ld	(hl),#0x7F
   007D 21r1Dr00            114 	ld	hl,#(_bloke1 + 0x0007)
   0080 36 7F               115 	ld	(hl),#0x7F
   0082 21r1Er00            116 	ld	hl,#(_bloke1 + 0x0008)
   0085 36 44               117 	ld	(hl),#0x44
   0087 21r1Fr00            118 	ld	hl,#(_bloke1 + 0x0009)
   008A 36 74               119 	ld	(hl),#0x74
   008C 21r20r00            120 	ld	hl,#(_bloke1 + 0x000a)
   008F 36 46               121 	ld	(hl),#0x46
   0091 21r21r00            122 	ld	hl,#(_bloke1 + 0x000b)
   0094 36 7C               123 	ld	(hl),#0x7C
   0096 21r22r00            124 	ld	hl,#(_bloke1 + 0x000c)
   0099 36 40               125 	ld	(hl),#0x40
   009B 21r23r00            126 	ld	hl,#(_bloke1 + 0x000d)
   009E 36 78               127 	ld	(hl),#0x78
   00A0 21r24r00            128 	ld	hl,#(_bloke1 + 0x000e)
   00A3 36 24               129 	ld	(hl),#0x24
   00A5 21r25r00            130 	ld	hl,#(_bloke1 + 0x000f)
   00A8 36 3C               131 	ld	(hl),#0x3C
   00AA 21r26r00            132 	ld	hl,#(_bloke1 + 0x0010)
   00AD 36 18               133 	ld	(hl),#0x18
   00AF 21r27r00            134 	ld	hl,#(_bloke1 + 0x0011)
   00B2 36 3C               135 	ld	(hl),#0x3C
   00B4 01r28r00            136 	ld	bc,#_bloke1 + 18
   00B7 AF                  137 	xor	a, a
   00B8 02                  138 	ld	(bc),a
   00B9 21r29r00            139 	ld	hl,#(_bloke1 + 0x0013)
   00BC 36 24               140 	ld	(hl),#0x24
   00BE 01r2Ar00            141 	ld	bc,#_bloke1 + 20
   00C1 AF                  142 	xor	a, a
   00C2 02                  143 	ld	(bc),a
   00C3 21r2Br00            144 	ld	hl,#(_bloke1 + 0x0015)
   00C6 36 24               145 	ld	(hl),#0x24
   00C8 01r2Cr00            146 	ld	bc,#_bloke1 + 22
   00CB AF                  147 	xor	a, a
   00CC 02                  148 	ld	(bc),a
   00CD 21r2Dr00            149 	ld	hl,#(_bloke1 + 0x0017)
   00D0 36 24               150 	ld	(hl),#0x24
   00D2 01r2Er00            151 	ld	bc,#_bloke1 + 24
   00D5 AF                  152 	xor	a, a
   00D6 02                  153 	ld	(bc),a
   00D7 21r2Fr00            154 	ld	hl,#(_bloke1 + 0x0019)
   00DA 36 24               155 	ld	(hl),#0x24
   00DC 01r30r00            156 	ld	bc,#_bloke1 + 26
   00DF AF                  157 	xor	a, a
   00E0 02                  158 	ld	(bc),a
   00E1 21r31r00            159 	ld	hl,#(_bloke1 + 0x001b)
   00E4 36 36               160 	ld	(hl),#0x36
   00E6 01r32r00            161 	ld	bc,#_bloke1 + 28
   00E9 AF                  162 	xor	a, a
   00EA 02                  163 	ld	(bc),a
   00EB 01r33r00            164 	ld	bc,#_bloke1 + 29
   00EE AF                  165 	xor	a, a
   00EF 02                  166 	ld	(bc),a
   00F0 01r34r00            167 	ld	bc,#_bloke1 + 30
   00F3 AF                  168 	xor	a, a
   00F4 02                  169 	ld	(bc),a
   00F5 01r35r00            170 	ld	bc,#_bloke1 + 31
   00F8 AF                  171 	xor	a, a
   00F9 02                  172 	ld	(bc),a
   00FA 01r36r00            173 	ld	bc,#_bloke1 + 32
   00FD AF                  174 	xor	a, a
   00FE 02                  175 	ld	(bc),a
   00FF 01r37r00            176 	ld	bc,#_bloke1 + 33
   0102 AF                  177 	xor	a, a
   0103 02                  178 	ld	(bc),a
   0104 21r38r00            179 	ld	hl,#(_bloke1 + 0x0022)
   0107 36 38               180 	ld	(hl),#0x38
   0109 21r39r00            181 	ld	hl,#(_bloke1 + 0x0023)
   010C 36 38               182 	ld	(hl),#0x38
   010E 21r3Ar00            183 	ld	hl,#(_bloke1 + 0x0024)
   0111 36 7C               184 	ld	(hl),#0x7C
   0113 21r3Br00            185 	ld	hl,#(_bloke1 + 0x0025)
   0116 36 44               186 	ld	(hl),#0x44
   0118 21r3Cr00            187 	ld	hl,#(_bloke1 + 0x0026)
   011B 36 7F               188 	ld	(hl),#0x7F
   011D 21r3Dr00            189 	ld	hl,#(_bloke1 + 0x0027)
   0120 36 7F               190 	ld	(hl),#0x7F
   0122 21r3Er00            191 	ld	hl,#(_bloke1 + 0x0028)
   0125 36 44               192 	ld	(hl),#0x44
   0127 21r3Fr00            193 	ld	hl,#(_bloke1 + 0x0029)
   012A 36 74               194 	ld	(hl),#0x74
   012C 21r40r00            195 	ld	hl,#(_bloke1 + 0x002a)
   012F 36 46               196 	ld	(hl),#0x46
   0131 21r41r00            197 	ld	hl,#(_bloke1 + 0x002b)
   0134 36 7C               198 	ld	(hl),#0x7C
   0136 21r42r00            199 	ld	hl,#(_bloke1 + 0x002c)
   0139 36 40               200 	ld	(hl),#0x40
   013B 21r43r00            201 	ld	hl,#(_bloke1 + 0x002d)
   013E 36 78               202 	ld	(hl),#0x78
   0140 21r44r00            203 	ld	hl,#(_bloke1 + 0x002e)
   0143 36 24               204 	ld	(hl),#0x24
   0145 21r45r00            205 	ld	hl,#(_bloke1 + 0x002f)
   0148 36 3C               206 	ld	(hl),#0x3C
   014A 21r46r00            207 	ld	hl,#(_bloke1 + 0x0030)
   014D 36 18               208 	ld	(hl),#0x18
   014F 21r47r00            209 	ld	hl,#(_bloke1 + 0x0031)
   0152 36 3C               210 	ld	(hl),#0x3C
   0154 01r48r00            211 	ld	bc,#_bloke1 + 50
   0157 AF                  212 	xor	a, a
   0158 02                  213 	ld	(bc),a
   0159 21r49r00            214 	ld	hl,#(_bloke1 + 0x0033)
   015C 36 22               215 	ld	(hl),#0x22
   015E 01r4Ar00            216 	ld	bc,#_bloke1 + 52
   0161 AF                  217 	xor	a, a
   0162 02                  218 	ld	(bc),a
   0163 21r4Br00            219 	ld	hl,#(_bloke1 + 0x0035)
   0166 36 22               220 	ld	(hl),#0x22
   0168 01r4Cr00            221 	ld	bc,#_bloke1 + 54
   016B AF                  222 	xor	a, a
   016C 02                  223 	ld	(bc),a
   016D 21r4Dr00            224 	ld	hl,#(_bloke1 + 0x0037)
   0170 36 22               225 	ld	(hl),#0x22
   0172 01r4Er00            226 	ld	bc,#_bloke1 + 56
   0175 AF                  227 	xor	a, a
   0176 02                  228 	ld	(bc),a
   0177 21r4Fr00            229 	ld	hl,#(_bloke1 + 0x0039)
   017A 36 23               230 	ld	(hl),#0x23
   017C 01r50r00            231 	ld	bc,#_bloke1 + 58
   017F AF                  232 	xor	a, a
   0180 02                  233 	ld	(bc),a
   0181 21r51r00            234 	ld	hl,#(_bloke1 + 0x003b)
   0184 36 30               235 	ld	(hl),#0x30
   0186 01r52r00            236 	ld	bc,#_bloke1 + 60
   0189 AF                  237 	xor	a, a
   018A 02                  238 	ld	(bc),a
   018B 01r53r00            239 	ld	bc,#_bloke1 + 61
   018E AF                  240 	xor	a, a
   018F 02                  241 	ld	(bc),a
   0190 01r54r00            242 	ld	bc,#_bloke1 + 62
   0193 AF                  243 	xor	a, a
   0194 02                  244 	ld	(bc),a
   0195 01r55r00            245 	ld	bc,#_bloke1 + 63
   0198 AF                  246 	xor	a, a
   0199 02                  247 	ld	(bc),a
   019A 01r56r00            248 	ld	bc,#_bloke1 + 64
   019D AF                  249 	xor	a, a
   019E 02                  250 	ld	(bc),a
   019F 01r57r00            251 	ld	bc,#_bloke1 + 65
   01A2 AF                  252 	xor	a, a
   01A3 02                  253 	ld	(bc),a
   01A4 21r58r00            254 	ld	hl,#(_bloke1 + 0x0042)
   01A7 36 38               255 	ld	(hl),#0x38
   01A9 21r59r00            256 	ld	hl,#(_bloke1 + 0x0043)
   01AC 36 38               257 	ld	(hl),#0x38
   01AE 21r5Ar00            258 	ld	hl,#(_bloke1 + 0x0044)
   01B1 36 7C               259 	ld	(hl),#0x7C
   01B3 21r5Br00            260 	ld	hl,#(_bloke1 + 0x0045)
   01B6 36 44               261 	ld	(hl),#0x44
   01B8 21r5Cr00            262 	ld	hl,#(_bloke1 + 0x0046)
   01BB 36 7F               263 	ld	(hl),#0x7F
   01BD 21r5Dr00            264 	ld	hl,#(_bloke1 + 0x0047)
   01C0 36 7F               265 	ld	(hl),#0x7F
   01C2 21r5Er00            266 	ld	hl,#(_bloke1 + 0x0048)
   01C5 36 44               267 	ld	(hl),#0x44
   01C7 21r5Fr00            268 	ld	hl,#(_bloke1 + 0x0049)
   01CA 36 74               269 	ld	(hl),#0x74
   01CC 21r60r00            270 	ld	hl,#(_bloke1 + 0x004a)
   01CF 36 46               271 	ld	(hl),#0x46
   01D1 21r61r00            272 	ld	hl,#(_bloke1 + 0x004b)
   01D4 36 7C               273 	ld	(hl),#0x7C
   01D6 21r62r00            274 	ld	hl,#(_bloke1 + 0x004c)
   01D9 36 40               275 	ld	(hl),#0x40
   01DB 21r63r00            276 	ld	hl,#(_bloke1 + 0x004d)
   01DE 36 78               277 	ld	(hl),#0x78
   01E0 21r64r00            278 	ld	hl,#(_bloke1 + 0x004e)
   01E3 36 24               279 	ld	(hl),#0x24
   01E5 21r65r00            280 	ld	hl,#(_bloke1 + 0x004f)
   01E8 36 3C               281 	ld	(hl),#0x3C
   01EA 21r66r00            282 	ld	hl,#(_bloke1 + 0x0050)
   01ED 36 18               283 	ld	(hl),#0x18
   01EF 21r67r00            284 	ld	hl,#(_bloke1 + 0x0051)
   01F2 36 3C               285 	ld	(hl),#0x3C
   01F4 01r68r00            286 	ld	bc,#_bloke1 + 82
   01F7 AF                  287 	xor	a, a
   01F8 02                  288 	ld	(bc),a
   01F9 21r69r00            289 	ld	hl,#(_bloke1 + 0x0053)
   01FC 36 42               290 	ld	(hl),#0x42
   01FE 01r6Ar00            291 	ld	bc,#_bloke1 + 84
   0201 AF                  292 	xor	a, a
   0202 02                  293 	ld	(bc),a
   0203 21r6Br00            294 	ld	hl,#(_bloke1 + 0x0055)
   0206 36 42               295 	ld	(hl),#0x42
   0208 01r6Cr00            296 	ld	bc,#_bloke1 + 86
   020B AF                  297 	xor	a, a
   020C 02                  298 	ld	(bc),a
   020D 21r6Dr00            299 	ld	hl,#(_bloke1 + 0x0057)
   0210 36 42               300 	ld	(hl),#0x42
   0212 01r6Er00            301 	ld	bc,#_bloke1 + 88
   0215 AF                  302 	xor	a, a
   0216 02                  303 	ld	(bc),a
   0217 21r6Fr00            304 	ld	hl,#(_bloke1 + 0x0059)
   021A 36 42               305 	ld	(hl),#0x42
   021C 01r70r00            306 	ld	bc,#_bloke1 + 90
   021F AF                  307 	xor	a, a
   0220 02                  308 	ld	(bc),a
   0221 21r71r00            309 	ld	hl,#(_bloke1 + 0x005b)
   0224 36 63               310 	ld	(hl),#0x63
   0226 01r72r00            311 	ld	bc,#_bloke1 + 92
   0229 AF                  312 	xor	a, a
   022A 02                  313 	ld	(bc),a
   022B 01r73r00            314 	ld	bc,#_bloke1 + 93
   022E AF                  315 	xor	a, a
   022F 02                  316 	ld	(bc),a
   0230 01r74r00            317 	ld	bc,#_bloke1 + 94
   0233 AF                  318 	xor	a, a
   0234 02                  319 	ld	(bc),a
   0235 01r75r00            320 	ld	bc,#_bloke1 + 95
   0238 AF                  321 	xor	a, a
   0239 02                  322 	ld	(bc),a
   023A 01r76r00            323 	ld	bc,#_bloke1 + 96
   023D AF                  324 	xor	a, a
   023E 02                  325 	ld	(bc),a
   023F 01r77r00            326 	ld	bc,#_bloke1 + 97
   0242 AF                  327 	xor	a, a
   0243 02                  328 	ld	(bc),a
   0244 21r78r00            329 	ld	hl,#(_bloke1 + 0x0062)
   0247 36 38               330 	ld	(hl),#0x38
   0249 21r79r00            331 	ld	hl,#(_bloke1 + 0x0063)
   024C 36 38               332 	ld	(hl),#0x38
   024E 21r7Ar00            333 	ld	hl,#(_bloke1 + 0x0064)
   0251 36 7C               334 	ld	(hl),#0x7C
   0253 21r7Br00            335 	ld	hl,#(_bloke1 + 0x0065)
   0256 36 44               336 	ld	(hl),#0x44
   0258 21r7Cr00            337 	ld	hl,#(_bloke1 + 0x0066)
   025B 36 7F               338 	ld	(hl),#0x7F
   025D 21r7Dr00            339 	ld	hl,#(_bloke1 + 0x0067)
   0260 36 7F               340 	ld	(hl),#0x7F
   0262 21r7Er00            341 	ld	hl,#(_bloke1 + 0x0068)
   0265 36 44               342 	ld	(hl),#0x44
   0267 21r7Fr00            343 	ld	hl,#(_bloke1 + 0x0069)
   026A 36 74               344 	ld	(hl),#0x74
   026C 21r80r00            345 	ld	hl,#(_bloke1 + 0x006a)
   026F 36 46               346 	ld	(hl),#0x46
   0271 21r81r00            347 	ld	hl,#(_bloke1 + 0x006b)
   0274 36 7C               348 	ld	(hl),#0x7C
   0276 21r82r00            349 	ld	hl,#(_bloke1 + 0x006c)
   0279 36 40               350 	ld	(hl),#0x40
   027B 21r83r00            351 	ld	hl,#(_bloke1 + 0x006d)
   027E 36 78               352 	ld	(hl),#0x78
   0280 21r84r00            353 	ld	hl,#(_bloke1 + 0x006e)
   0283 36 24               354 	ld	(hl),#0x24
   0285 21r85r00            355 	ld	hl,#(_bloke1 + 0x006f)
   0288 36 3C               356 	ld	(hl),#0x3C
   028A 21r86r00            357 	ld	hl,#(_bloke1 + 0x0070)
   028D 36 18               358 	ld	(hl),#0x18
   028F 21r87r00            359 	ld	hl,#(_bloke1 + 0x0071)
   0292 36 3C               360 	ld	(hl),#0x3C
   0294 01r88r00            361 	ld	bc,#_bloke1 + 114
   0297 AF                  362 	xor	a, a
   0298 02                  363 	ld	(bc),a
   0299 21r89r00            364 	ld	hl,#(_bloke1 + 0x0073)
   029C 36 44               365 	ld	(hl),#0x44
   029E 01r8Ar00            366 	ld	bc,#_bloke1 + 116
   02A1 AF                  367 	xor	a, a
   02A2 02                  368 	ld	(bc),a
   02A3 21r8Br00            369 	ld	hl,#(_bloke1 + 0x0075)
   02A6 36 44               370 	ld	(hl),#0x44
   02A8 01r8Cr00            371 	ld	bc,#_bloke1 + 118
   02AB AF                  372 	xor	a, a
   02AC 02                  373 	ld	(bc),a
   02AD 21r8Dr00            374 	ld	hl,#(_bloke1 + 0x0077)
   02B0 36 44               375 	ld	(hl),#0x44
   02B2 01r8Er00            376 	ld	bc,#_bloke1 + 120
   02B5 AF                  377 	xor	a, a
   02B6 02                  378 	ld	(bc),a
   02B7 21r8Fr00            379 	ld	hl,#(_bloke1 + 0x0079)
   02BA 36 64               380 	ld	(hl),#0x64
   02BC 01r90r00            381 	ld	bc,#_bloke1 + 122
   02BF AF                  382 	xor	a, a
   02C0 02                  383 	ld	(bc),a
   02C1 21r91r00            384 	ld	hl,#(_bloke1 + 0x007b)
   02C4 36 06               385 	ld	(hl),#0x06
   02C6 01r92r00            386 	ld	bc,#_bloke1 + 124
   02C9 AF                  387 	xor	a, a
   02CA 02                  388 	ld	(bc),a
   02CB 01r93r00            389 	ld	bc,#_bloke1 + 125
   02CE AF                  390 	xor	a, a
   02CF 02                  391 	ld	(bc),a
   02D0 01r94r00            392 	ld	bc,#_bloke1 + 126
   02D3 AF                  393 	xor	a, a
   02D4 02                  394 	ld	(bc),a
   02D5 01r95r00            395 	ld	bc,#_bloke1 + 127
   02D8 AF                  396 	xor	a, a
   02D9 02                  397 	ld	(bc),a
                            398 ;--------------------------------------------------------
                            399 ; Home
                            400 ;--------------------------------------------------------
                            401 	.area _HOME
                            402 	.area _HOME
                            403 ;--------------------------------------------------------
                            404 ; code
                            405 ;--------------------------------------------------------
                            406 	.area _CODE
                            407 ;main.c:37: void performantDelay(UINT8 numloops){
                            408 ;	---------------------------------
                            409 ; Function performantDelay
                            410 ; ---------------------------------
   0000                     411 _performantDelay::
                            412 ;main.c:40: for(i=0;i<numloops;i++){
   0000 06 00               413 	ld	b,#0x00
   0002                     414 00103$:
   0002 78                  415 	ld	a,b
   0003 F8 02               416 	ldhl	sp,#2
   0005 96                  417 	sub	a, (hl)
   0006 D0                  418 	ret	NC
                            419 ;main.c:41: wait_vbl_done();
   0007 C5                  420 	push	bc
   0008 CDr00r00            421 	call	_wait_vbl_done
   000B C1                  422 	pop	bc
                            423 ;main.c:40: for(i=0;i<numloops;i++){
   000C 04                  424 	inc	b
   000D 18 F3               425 	jr	00103$
   000F C9                  426 	ret
                            427 ;main.c:45: INT8 wouldHitSurf(UINT8 projectedYPosition){
                            428 ;	---------------------------------
                            429 ; Function wouldHitSurf
                            430 ; ---------------------------------
   0010                     431 _wouldHitSurf::
                            432 ;main.c:46: if(projectedYPosition>=floorYPosition){
   0010 F8 02               433 	ldhl	sp,#2
   0012 7E                  434 	ld	a,(hl)
   0013 21r05r00            435 	ld	hl,#_floorYPosition
   0016 96                  436 	sub	a, (hl)
   0017 38 02               437 	jr	C,00102$
                            438 ;main.c:47: return floorYPosition;
   0019 5E                  439 	ld	e,(hl)
   001A C9                  440 	ret
   001B                     441 00102$:
                            442 ;main.c:49: return -1;
   001B 1E FF               443 	ld	e,#0xFF
   001D C9                  444 	ret
                            445 ;main.c:52: void jump(UINT8 spriteId,UINT8 spriteLocation[2]){
                            446 ;	---------------------------------
                            447 ; Function jump
                            448 ; ---------------------------------
   001E                     449 _jump::
   001E E8 FE               450 	add	sp, #-2
                            451 ;main.c:55: if(jumping==0){
   0020 21r02r00            452 	ld	hl,#_jumping
   0023 7E                  453 	ld	a,(hl)
   0024 B7                  454 	or	a, a
   0025 20 07               455 	jr	NZ,00102$
                            456 ;main.c:56: jumping=1;
   0027 36 01               457 	ld	(hl),#0x01
                            458 ;main.c:57: currentSpeedY=15;
   0029 21r04r00            459 	ld	hl,#_currentSpeedY
   002C 36 0F               460 	ld	(hl),#0x0F
   002E                     461 00102$:
                            462 ;main.c:60: currentSpeedY=currentSpeedY+gravity;
   002E 21r04r00            463 	ld	hl,#_currentSpeedY
   0031 56                  464 	ld	d,(hl)
   0032 7A                  465 	ld	a,d
   0033 21r03r00            466 	ld	hl,#_gravity
   0036 86                  467 	add	a, (hl)
   0037 21r04r00            468 	ld	hl,#_currentSpeedY
   003A 77                  469 	ld	(hl),a
                            470 ;main.c:62: spriteLocation[1]=spriteLocation[1]-currentSpeedY;
   003B F8 06               471 	ldhl	sp,#6
   003D 2B                  472 	dec	hl
   003E 5E                  473 	ld	e,(hl)
   003F 23                  474 	inc	hl
   0040 56                  475 	ld	d,(hl)
   0041 21 01 00            476 	ld	hl,#0x0001
   0044 19                  477 	add	hl,de
   0045 33                  478 	inc	sp
   0046 33                  479 	inc	sp
   0047 E5                  480 	push	hl
   0048 D1                  481 	pop	de
   0049 D5                  482 	push	de
   004A 1A                  483 	ld	a,(de)
   004B 47                  484 	ld	b,a
   004C 21r04r00            485 	ld	hl,#_currentSpeedY
   004F 96                  486 	sub	a, (hl)
   0050 47                  487 	ld	b,a
   0051 E1                  488 	pop	hl
   0052 E5                  489 	push	hl
   0053 70                  490 	ld	(hl),b
                            491 ;main.c:63: possibleSurfaceY=wouldHitSurf(spriteLocation[1]);
   0054 C5                  492 	push	bc
   0055 33                  493 	inc	sp
   0056 CDr10r00            494 	call	_wouldHitSurf
   0059 33                  495 	inc	sp
   005A 4B                  496 	ld	c,e
                            497 ;main.c:67: move_sprite(spriteId,spriteLocation[0],possibleSurfaceY);
   005B F8 06               498 	ldhl	sp,#6
   005D 2B                  499 	dec	hl
   005E 5E                  500 	ld	e,(hl)
   005F 23                  501 	inc	hl
   0060 56                  502 	ld	d,(hl)
   0061 1A                  503 	ld	a,(de)
   0062 47                  504 	ld	b,a
                            505 ;main.c:65: if(possibleSurfaceY>-1){
   0063 79                  506 	ld	a,c
   0064 5F                  507 	ld	e,a
   0065 3E FF               508 	ld	a,#0xFF
   0067 57                  509 	ld	d,a
   0068 3E FF               510 	ld	a,#0xFF
   006A 91                  511 	sub	a, c
   006B CB 7B               512 	bit	7, e
   006D 28 07               513 	jr	Z,00116$
   006F CB 7A               514 	bit	7, d
   0071 20 08               515 	jr	NZ,00117$
   0073 BF                  516 	cp	a, a
   0074 18 05               517 	jr	00117$
   0076                     518 00116$:
   0076 CB 7A               519 	bit	7, d
   0078 28 01               520 	jr	Z,00117$
   007A 37                  521 	scf
   007B                     522 00117$:
   007B 30 16               523 	jr	NC,00104$
                            524 ;main.c:66: jumping=0;
   007D 21r02r00            525 	ld	hl,#_jumping
   0080 36 00               526 	ld	(hl),#0x00
                            527 ;main.c:67: move_sprite(spriteId,spriteLocation[0],possibleSurfaceY);
   0082 79                  528 	ld	a,c
   0083 F5                  529 	push	af
   0084 33                  530 	inc	sp
   0085 C5                  531 	push	bc
   0086 33                  532 	inc	sp
   0087 F8 06               533 	ldhl	sp,#6
   0089 7E                  534 	ld	a,(hl)
   008A F5                  535 	push	af
   008B 33                  536 	inc	sp
   008C CDr00r00            537 	call	_move_sprite
   008F E8 03               538 	add	sp, #3
   0091 18 11               539 	jr	00106$
   0093                     540 00104$:
                            541 ;main.c:71: move_sprite(spriteId,spriteLocation[0],spriteLocation[1]);
   0093 D1                  542 	pop	de
   0094 D5                  543 	push	de
   0095 1A                  544 	ld	a,(de)
   0096 F5                  545 	push	af
   0097 33                  546 	inc	sp
   0098 C5                  547 	push	bc
   0099 33                  548 	inc	sp
   009A F8 06               549 	ldhl	sp,#6
   009C 7E                  550 	ld	a,(hl)
   009D F5                  551 	push	af
   009E 33                  552 	inc	sp
   009F CDr00r00            553 	call	_move_sprite
   00A2 E8 03               554 	add	sp, #3
   00A4                     555 00106$:
   00A4 E8 02               556 	add	sp, #2
   00A6 C9                  557 	ret
                            558 ;main.c:75: void main(){
                            559 ;	---------------------------------
                            560 ; Function main
                            561 ; ---------------------------------
   00A7                     562 _main::
                            563 ;main.c:77: set_sprite_data(0,8,bloke1);//(first tile,last tile,char name) 
   00A7 11r16r00            564 	ld	de,#_bloke1
   00AA D5                  565 	push	de
   00AB 21 00 08            566 	ld	hl,#0x0800
   00AE E5                  567 	push	hl
   00AF CDr00r00            568 	call	_set_sprite_data
   00B2 E8 04               569 	add	sp, #4
                            570 ;main.c:78: set_sprite_tile(1,0);//(sprite tile number used,sprite ID)
   00B4 21 01 00            571 	ld	hl,#0x0001
   00B7 E5                  572 	push	hl
   00B8 CDr00r00            573 	call	_set_sprite_tile
   00BB E8 02               574 	add	sp, #2
                            575 ;main.c:80: set_sprite_data(0,0,bloke2);
   00BD 11r06r00            576 	ld	de,#_bloke2
   00C0 D5                  577 	push	de
   00C1 21 00 00            578 	ld	hl,#0x0000
   00C4 E5                  579 	push	hl
   00C5 CDr00r00            580 	call	_set_sprite_data
   00C8 E8 04               581 	add	sp, #4
                            582 ;main.c:81: set_sprite_tile(0,1);
   00CA 21 00 01            583 	ld	hl,#0x0100
   00CD E5                  584 	push	hl
   00CE CDr00r00            585 	call	_set_sprite_tile
   00D1 E8 02               586 	add	sp, #2
                            587 ;main.c:83: playerLocation[0]=10;
   00D3 21r00r00            588 	ld	hl,#_playerLocation
   00D6 36 0A               589 	ld	(hl),#0x0A
                            590 ;main.c:84: playerLocation[1]=floorYPosition;
   00D8 11r01r00            591 	ld	de,#(_playerLocation + 0x0001)
   00DB 21r05r00            592 	ld	hl,#_floorYPosition
   00DE 7E                  593 	ld	a,(hl)
   00DF 12                  594 	ld	(de),a
                            595 ;main.c:85: jumping=0;
   00E0 21r02r00            596 	ld	hl,#_jumping
   00E3 36 00               597 	ld	(hl),#0x00
                            598 ;main.c:87: move_sprite(0,playerLocation[0],playerLocation[1]);
   00E5 11r01r00            599 	ld	de, #(_playerLocation + 0x0001) + 0
   00E8 1A                  600 	ld	a,(de)
   00E9 47                  601 	ld	b,a
   00EA FAr00r00            602 	ld	a, (#_playerLocation + 0)
   00ED C5                  603 	push	bc
   00EE 33                  604 	inc	sp
   00EF F5                  605 	push	af
   00F0 33                  606 	inc	sp
   00F1 AF                  607 	xor	a, a
   00F2 F5                  608 	push	af
   00F3 33                  609 	inc	sp
   00F4 CDr00r00            610 	call	_move_sprite
   00F7 E8 03               611 	add	sp, #3
                            612 ;main.c:88: move_sprite(1,20,100);//(sprite ID,x location,y location)
   00F9 21 14 64            613 	ld	hl,#0x6414
   00FC E5                  614 	push	hl
   00FD 3E 01               615 	ld	a,#0x01
   00FF F5                  616 	push	af
   0100 33                  617 	inc	sp
   0101 CDr00r00            618 	call	_move_sprite
   0104 E8 03               619 	add	sp, #3
                            620 ;main.c:90: DISPLAY_ON;
   0106 11 40 FF            621 	ld	de,#0xFF40
   0109 1A                  622 	ld	a,(de)
   010A 5F                  623 	ld	e,a
   010B 16 00               624 	ld	d,#0x00
   010D 7B                  625 	ld	a,e
   010E CB FF               626 	set	7, a
   0110 47                  627 	ld	b,a
   0111 21 40 FF            628 	ld	hl,#0xFF40
   0114 70                  629 	ld	(hl),b
                            630 ;main.c:91: SHOW_SPRITES;
   0115 11 40 FF            631 	ld	de,#0xFF40
   0118 1A                  632 	ld	a,(de)
   0119 5F                  633 	ld	e,a
   011A 16 00               634 	ld	d,#0x00
   011C 7B                  635 	ld	a,e
   011D CB CF               636 	set	1, a
   011F 47                  637 	ld	b,a
   0120 2E 40               638 	ld	l, #0x40
   0122 70                  639 	ld	(hl),b
                            640 ;main.c:93: while(1){
   0123                     641 00109$:
                            642 ;main.c:94: if((joypad() & J_A)|| jumping==1){
   0123 CDr00r00            643 	call	_joypad
   0126 16 00               644 	ld	d,#0x00
   0128 CB 63               645 	bit	4, e
   012A 20 07               646 	jr	NZ,00101$
   012C 21r02r00            647 	ld	hl,#_jumping
   012F 7E                  648 	ld	a,(hl)
   0130 3D                  649 	dec	a
   0131 20 0C               650 	jr	NZ,00102$
   0133                     651 00101$:
                            652 ;main.c:95: jump(0,playerLocation);	
   0133 11r00r00            653 	ld	de,#_playerLocation
   0136 D5                  654 	push	de
   0137 AF                  655 	xor	a, a
   0138 F5                  656 	push	af
   0139 33                  657 	inc	sp
   013A CDr1Er00            658 	call	_jump
   013D E8 03               659 	add	sp, #3
   013F                     660 00102$:
                            661 ;main.c:97: if(joypad() & J_LEFT){
   013F CDr00r00            662 	call	_joypad
   0142 16 00               663 	ld	d,#0x00
   0144 CB 4B               664 	bit	1, e
   0146 28 19               665 	jr	Z,00105$
                            666 ;main.c:98: playerLocation[0]=playerLocation[0]-2;
   0148 FAr00r00            667 	ld	a, (#_playerLocation + 0)
   014B 47                  668 	ld	b,a
   014C 05                  669 	dec	b
   014D 05                  670 	dec	b
   014E 21r00r00            671 	ld	hl,#_playerLocation
   0151 70                  672 	ld	(hl),b
                            673 ;main.c:99: move_sprite(0,playerLocation[0],playerLocation[1]);
   0152 FAr01r00            674 	ld	a, (#(_playerLocation + 0x0001) + 0)
   0155 F5                  675 	push	af
   0156 33                  676 	inc	sp
   0157 C5                  677 	push	bc
   0158 33                  678 	inc	sp
   0159 AF                  679 	xor	a, a
   015A F5                  680 	push	af
   015B 33                  681 	inc	sp
   015C CDr00r00            682 	call	_move_sprite
   015F E8 03               683 	add	sp, #3
   0161                     684 00105$:
                            685 ;main.c:101: if(joypad() & J_RIGHT){
   0161 CDr00r00            686 	call	_joypad
   0164 16 00               687 	ld	d,#0x00
   0166 CB 43               688 	bit	0, e
   0168 28 19               689 	jr	Z,00107$
                            690 ;main.c:102: playerLocation[0]=playerLocation[0]+2;
   016A FAr00r00            691 	ld	a, (#_playerLocation + 0)
   016D 47                  692 	ld	b,a
   016E 04                  693 	inc	b
   016F 04                  694 	inc	b
   0170 21r00r00            695 	ld	hl,#_playerLocation
   0173 70                  696 	ld	(hl),b
                            697 ;main.c:103: move_sprite(0,playerLocation[0],playerLocation[1]);
   0174 FAr01r00            698 	ld	a, (#(_playerLocation + 0x0001) + 0)
   0177 F5                  699 	push	af
   0178 33                  700 	inc	sp
   0179 C5                  701 	push	bc
   017A 33                  702 	inc	sp
   017B AF                  703 	xor	a, a
   017C F5                  704 	push	af
   017D 33                  705 	inc	sp
   017E CDr00r00            706 	call	_move_sprite
   0181 E8 03               707 	add	sp, #3
   0183                     708 00107$:
                            709 ;main.c:106: performantDelay(2);
   0183 3E 02               710 	ld	a,#0x02
   0185 F5                  711 	push	af
   0186 33                  712 	inc	sp
   0187 CDr00r00            713 	call	_performantDelay
   018A 33                  714 	inc	sp
   018B C3r23r01            715 	jp	00109$
   018E C9                  716 	ret
                            717 	.area _CODE
                            718 	.area _CABS (ABS)
